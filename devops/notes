    Notes
     
    pwd = present working directoy          
    cd  =change directory
    os = operating system
    ide =integrated development environment (IDE)
    
    
    Popular instructions for dockerfile
      
      FROM â€“ This instruction defines the parent image for subsequent instructions. 

 ***for more details go through this link 
 https://www.howtoforge.com/tutorial/how-to-create-docker-images-with-dockerfile-18-04/
   
   
   How to create a image
   
FROM is the starting point of image and it defines the base image 

    
   DATABASE 
   
   docker pull postgres
docker images 
docker container create \
--name vinay \   (container name)
-p 5433:5432 \ (port number)
-h vinay \  (set the host name for container
-e POSTGRES_PASSWORD=vinuvinay13199 \  (to pass the environment variable)
postgres
docker ps -a  (to check)
docker container start vinay 
docker ps  (to check the container is running or not)
docker container logs vinay
   
   ngnix is very fast 
   
  ===============================================
  
               NGINX reverese proxy
               
 * docker run -d --name nginx-base -p 80:80 nginx:latest 
 *docker cp nginx-base:/etc/nginx/conf.d/default.conf ~/Desktop/default.conf
 	 sudo nano default.conf
  sudo docker cp ~/Desktop
   sudo docker cp ~/Desktop/default.conf nginx-base:/etc/nginx/conf.d/
   
   
   
   
   ======================================================
   
                    NGINX
   
   https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04
   
   
   rewrite  ^(.*)$ https://v2.blu-aie.ai;

   
   ========================================================
   
   
   ==============================================
   
   
   server {
    listen 80;
    server_name harshini.kreatio.info;
    return 301 https://$host$request_uri;



   location / {
         proxy_set_header Host $http_host;
         proxy_redirect off;
         proxy_pass http://gocd:8153;
    }
  }
   
   

======domain====

https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-configure-multiple-domains-with-nginx-on-ubuntu/
=====================================

server {
  listen 80;
  listen 8000;  # from you config, remove if unnecessary

  server_name 34.245.202.112;

  proxy_set_header Host $http_host;
  proxy_set_header X-Forwarded-Host $host;

  location / {
    # 'the frontend(nuxt) at 34.245.202.112'
    # This is the default route. Requests get here when there's no
    # better match to go.
    proxy_pass http://nuxt:3000;
  }

  location /api/ {
    # This location will trigger when location in URI begins with '/api/'
    # e.g. http://yourserver.org/api/v1/hello/world
    proxy_pass http://django:8001;
  }

  location /admin/ {
    # exactly as /api/
    proxy_pass http://django:8001;
  }

  location /static/ {
    # same as /api/ but local files instead of proxy
    alias /static/;
  }
}===========


wget https://dl.google.com/linux/direct/go... server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # return 301 https://$host$request_uri;

    #access_log  /var/log/nginx/host.access.log  main;

   # location / {
    #    root   /usr/share/nginx/html;
   #     index  index.html index.htm;
  #   }
 
     location / {
      #    proxy_set_header Host $http_host;
         proxy_pass http://192.168.15.121:4200;
   }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
     #   root   /usr/share/nginx/html;
    #}

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
  #  } 
}


sudo apt install ./google-chrome-stable_current_amd64.deb
 ===========================
 
 127.0.0.1    localhost
127.0.1.1    00402

 

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
=================================================================
  
  CONFIG FILE
  
 server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # return 301 https://$host$request_uri;

    #access_log  /var/log/nginx/host.access.log  main;

   # location / {
    #    root   /usr/share/nginx/html;
   #     index  index.html index.htm;
  #   }
 
     location / {
      #    proxy_set_header Host $http_host;
         proxy_pass http://192.168.15.121:4200;
   }

    #error_page  404              
}
=============================================================================

proxy_set_header:-

===============

To adjust or set headers for proxied connections, use the proxy_set_header directive, followed by the header value. You can find a list of all available Request Headers and their allowed values here . If you want to prevent a header from being passed to the proxied server, set it to an empty string "

 

proxy_pass:-

==========

The proxy_pass setting makes the Nginx reverse proxy setup work. The proxy_pass is configured in the location section of any virtual host configuration file. To set up an Nginx proxy_pass globally, edit the default file in Nginx's sites-available folder

 =========================================
    
 docker run -itd --name nginx -p 80:80 -p 443:443 -v /data/kreatio-nginx/conf:/usr/local/openresty/nginx/conf -v /data/kreatio-nginx/cache:/usr/local/openresty/nginx/cache -v /data/kreatio-nginx/nginx_logs/nginx:/usr/local/openresty/nginx/tmp/logs -v /data/kreatio-nginx/tmp:/usr/local/openresty/nginx/tmp quay.io/kreatio/nginx:1.19.9.1


 docker run -itd --name nginx -p 80:80 -v /data/kreatio-nginx/conf:/usr/local/openresty/nginx/conf -v /data/kreatio-nginx/cache:/usr/local/openresty/nginx/cache -v /data/kreatio-nginx/nginx_logs/nginx:/usr/local/openresty/nginx/tmp/logs -v /data/kreatio-nginx/tmp:/usr/local/openresty/nginx/tmp quay.io/kreatio/nginx:1.19.9.1

   =======================
   https://www.youtube.com/watch?v=lCq4mYQL0WY
   =========================	
   
   The proxy_pass setting makes the Nginx reverse proxy setup work. The proxy_pass is configured in the location section of any virtual host configuration file. To set up an Nginx proxy_pass globally, edit the default file in Nginx's sites-available folder.
   
   ------------------------
     
    ANSible install link
   https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-20-04
   
   =====
   ssh-copy-id -i
   
   =====================================================
          Ansible installitation and playbook
   ----------------------------------
   sudo apt-get update
   sudo apt-get install software-properties-common
   sudo apt-add-repository ppa:ansible/ansible
   sudo apt-get update
   sudo apt-get install ansible
   ----------------------------------
   /home/vinuvinay/.ssh/id_rsa.pub
-----------------------
 
 
 
 
 
 
 Ansible playbook nginx instalation
 
 https://www.techbeginner.in/2021/01/how-to-install-nginx-using-ansible-playbook-on-ubuntu.html
 
 
 
 
 
 ---
- hosts: localhost
  tasks:
- name: Create public IP address
    azure_rm_publicipaddress:
    resource_group: rg-cs-ansible
    allocation_method: Static
    name: pip-cs-web
    register: output_ip_address

- name: Output public IP
    debug:
    msg: "The public IP is {{ output_ip_address.state.ip_address }}"
  ====================================================================
 Ansible installation
 
  https://code-maven.com/install-and-configure-nginx-using-ansible
 
 
 ==========================================================================================
 
 prerequisities 
 
--- 
 - name: Install git
  apt:
    name: git
    state: present
    update_cache: yes
   
   
   =========================================================
   
    Mongodb 
    
---
- name: MongoDB - Import public key
  apt_key:
    keyserver: hkp://keyserver.ubuntu.com:80
    id: EA312927
- name: MongoDB - Add repository
  apt_repository:
    filename: '/etc/apt/sources.list.d/mongodb-org-3.2.list'
    repo: 'deb <a href="http://repo.mongodb.org/apt/ubuntu">http://repo.mongodb.org/apt/ubuntu</a> xenial/mongodb-org/3.2 multiverse'
    state: present
    update_cache: yes
- name: MongoDB - Install MongoDB
  apt:
    name: mongodb-org
    state: present
    update_cache: yes
- name: MongoDB - Running state
  service:
    name: mongod
    state: started
   
 
===================================================================
 Nodejs 
 
 
 - name: Node.js - Get script
  get_url:
    url: "http://deb.nodesource.com/setup_6.x"
    dest: "{{ var_node }}/nodejs.sh"

- name: Node.js - Set execution permission to script
  file:
    path: "{{ var_node }}/nodejs.sh"
    mode: "u+x"

- name: Node.js - Execute installation script
  shell: "{{ var_node }}/nodejs.sh"

- name: Node.js - Remove installation script
  file:
    path: "{{ var_node}}/nodejs.sh"
    state: absent

- name: Node.js - Install Node.js
  apt: name={{ item }} state=present update_cache=yes
  with_items:
    - build-essential
    - nodejs

- name: Node.js - Install bower and gulp globally
  npm: name={{ item }} state=present global=yes
  with_items:
    - bower
    - gulp
    
=====  = ========================================== 
   Meanstack.yml
   
--- 
 - hosts: all
   become: true
   vars: 
     var_node: /tmp
   roles:
       - prerequisities
       
       ==============================
       slave machine 
       
       sudo apt-key list | grep "expired:"
       sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xd68fa50fea312927 ============================================================================================================
 
     creating nginx container using Ansible playbook
     
 
  - name: stop nginx
    become: true
    command: docker stop nginx1
    ignore_errors: yes
  - name: remove nginx
    become: true
    command: docker rm -f nginx1
    ignore_errors: yes
  - name: restart nginx1
    become: true
    command: docker run --name nginx --network kreatio_network -v /data/kreatio-nginx/public:/usr/local/openresty/nginx/public -v /data/kreatio-nginx/nginx_logs/nginx:/usr/local/openresty/nginx/tmp/logs -v /data/kreatio-nginx/cache:/usr/local/openresty/nginx/cache -p 80:80 -d quay.io/kreatio/nginx:1.9.15
    
 
 
 ===============================================================================================	
  creating blu-aie container using Ansible playbook
 
 ---
 - name: create directory
   hosts: localhost
   tasks:
   - name: blu-aie
     become: true
     command: docker run --name blu-aie -p 4200:4200 -d quay.io/kreatio/app:blu_aie_ui_22

 ================================================================================================
  creating elasticsearch container using Ansible playbook
  
  company image = docker.elastic.co/elasticsearch/elasticsearch:6.1.0
  
  ---
- name: create directory
  hosts: localhost
  tasks:
    - name: elastic-search
      become: true
      command: docker run -d --network=elastic --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.6.2
========================================================================================================

   how to install virtual box 
   
   chrome search virtualbox
   download 
   cd Downloads
   sudo dpkg -i virtualbox-7.0_7.0.4-154605_Ubuntu_focal_amd64.deb
   sudo apt -f install
    
    sudo apt remove virtualbox
    sudo apt autoremove
   ======================================================================================= 
   
 authorized_keys
 
 chown -R vinay:vinay sudoers
 chmod 0440 /etc/sudoers
 
 
 
 ==========================================================
 how to deploy local machine to virtual machine
 
 Answer: create a directory inside create hosts & roles
 inside hosts create file 

 [virtual_a]
 vinay ansible_host=192.168.21.21 ansible_user=vinay
 
 in roles 
 ---
- name: postgres-sql
   # become: true
  command: docker run --name postgresql -e POSTGRES_USER=vinuvinay -e POSTGRES_PASSWORD=vinay -p 5432:5432 -v /data:/var/lib/postgresql/data6 -itd postgres:latest

after that create ansible playbook  .yml file
---
- name: vinay1
  hosts: virtual_a
  roles:
    - virtual1


after run the below command

ansible-playbook -i hosts/virtual1/ virtual.yml 
    or
ansible-playbook -i inventory  virtual.yml 

======================================================================================
whats in it for you ?
 1. water fall model 
 2. agile model 
 3. what is devops ?
 4. Devops phares 
 5. Devops Tools 
 6.Devops Advantages 
 
 
 =============================================================================
 
     gocd 
 only one instance of gocd pipeline can run at the same time
 there are three types of instances 
 1. run single instance of pipeline at a time
 2. run single instance of pipeline and lock on failure
 3. run multiple instances
  
  Managing dependencies
  
  sometimes you need more complex triggers than a simple pipeline of stages and jobs. in particular, you may want a pipeline to trigger based on the result of stage in another pipeline. This is possible by adding pipelines as materials===================================================================================
ansible playbook & gocd 

 main.yml playbook

- name: gocd
  hosts: virtual_a
  roles:
  - demo
    
    ----------------------------------
    host 
    
    [virtual_a]
vinay ansible_host=192.168.21.21 ansible_user=vinay
vboxuser ansible_host=192.168.20.20 ansible_user=vboxuser

--------------------------------
    roles

---
- name: postgres-sql
   # become: true
  command: docker run --name postgresql -e POSTGRES_USER=vinuvinay -e POSTGRES_PASSWORD=vinay -p 5432:5432 -v /data:/var/lib/postgresql/data6 -itd postgres:latest

------------------------------------------------------------------------------
  
  ========================================================
  gocd learning link
  
  https://www.lambdatest.com/blog/building-an-automated-testing-pipeline-with-gocd/
  ========================================================
       
       creating docker agent
       
  sudo docker run -itd --hostname agent --dns=192.168.2.1 --name agent-v /var/run/docker.sock:/var/run/docker.sock -e GO_SERVER_URL=http://192.168.15.121:8153/go gocd/gocd-agent-ubuntu-20.04:v22.3.0

  =========================================================================
  ===================================================================================
      ansible playbook & gocd 

 main.yml playbook

- name: gocd
  hosts: virtual_a
  roles:
  - demo
    
    ----------------------------------
    host 
    
    [virtual_a]
vinay ansible_host=192.168.21.21 ansible_user=vinay
vboxuser ansible_host=192.168.20.20 ansible_user=vboxuser

--------------------------------
    roles

---
- name: postgres-sql
   # become: true
  command: docker run --name postgresql -e POSTGRES_USER=vinuvinay -e POSTGRES_PASSWORD=vinay -p 5432:5432 -v /data:/var/lib/postgresql/data6 -itd postgres:latest

------------------------------------------------------------------------------
     how to connect local machine to virtual machine  
     
 
https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04

-----------------------------------------------------------------------------------

vinay@109:/home/ruby/DB_backup$ cd 
vinay@109:~$ docker exec -it db1 bash
root@8840feb00a65:/# cd /home/DB_backup/
root@8840feb00a65:/home/DB_backup# su postgres
$ psql 
Password for user postgres: 
psql (12.7 (Ubuntu 12.7-1.pgdg20.04+1))
Type "help" for help.

postgres=# \l
                                         List of databases
        Name        |     Owner      | Encoding |   Collate   |    Ctype    |   Access privileges   
--------------------+----------------+----------+-------------+-------------+-----------------------
 demo               | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 incisive-cms-stage | incisive-stage | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 postgres           | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0          | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                    |                |          |             |             | postgres=CTc/postgres
 template1          | postgres       | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
                    |                |          |             |             | postgres=CTc/postgres
(5 rows)

postgres=# exit
could not save history to file "/home/postgres/.psql_history": No such file or directory
$ 
root@8840feb00a65:/home/DB_backup# LS
bash: LS: command not found
root@8840feb00a65:/home/DB_backup# ls -lrth
total 1.9G
-rw-r--r-- 1 root root    0 Feb  2 07:11 db_backup_19.sql
-rw-r--r-- 1 root root 1.9G Feb  2 13:20 incisive-cms-stage-dec-19.sql
root@8840feb00a65:/home/DB_backup# pwd
/home/DB_backup
root@8840feb00a65:/home/DB_backup# pg_restore -h localhost -p 5432 -U incisive-stage -d incisive-cms-stage -v incisive-cms-stage-dec-19.sql
pg_restore: connecting to database for restore
Password: 
pg_restore: error: connection to database "incisive-cms-stage" failed: FATAL:  password authentication failed for user "incisive-stage"
root@8840feb00a65:/home/DB_backup# pg_restore -h localhost -p 5432 -U incisive-stage -d incisive-cms-stage -v incisive-cms-stage-dec-19.sql
pg_restore: connecting to database for restore
Password: 
pg_restore: creating EXTENSION "pg_stat_statements"
pg_restore: creating COMMENT "EXTENSION pg_stat_statements"
pg_restore: creating EXTENSION "uuid-ossp"
pg_restore: creating COMMENT "EXTENSION "uuid-ossp""
pg_restore: creating TABLE "public.accessed_articles"
pg_restore: creating TABLE "public.activity_statuses"
pg_restore: creating TABLE "public.activity_summaries"
pg_restore: creating TABLE "public.activity_types"
pg_restore: creating TABLE "public.admin_users"
pg_restore: creating TABLE "public.admins"
pg_restore: creating TABLE "public.ads"
pg_restore: creating TABLE "public.agencies"
pg_restore: creating TABLE "public.all_redirects"
pg_restore: creating TABLE "public.answers"
pg_restore: creating TABLE "public.ar_internal_metadata"
pg_restore: creating TABLE "public.article_authors"
pg_restore: creating TABLE "public.article_category_sites"


  
